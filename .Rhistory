filter(Metabolite == "D") %>%
pull(Protein)
targets_e <-
Table_SwissTarget %>%
filter(Metabolite == "E") %>%
pull(Protein)
targets_f <-
Table_SwissTarget %>%
filter(Metabolite == "F") %>%
pull(Protein)
targets_g <-
Table_SwissTarget %>%
filter(Metabolite == "G") %>%
pull(Protein)
targets_h <-
Table_SwissTarget %>%
filter(Metabolite == "H") %>%
pull(Protein)
targets_i <-
Table_SwissTarget %>%
filter(Metabolite == "I") %>%
pull(Protein)
#le pongo si son targets
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets,
target_a = name%in%targets_a,
target_b = name%in%targets_b,
target_c = name%in%targets_c,
target_d = name%in%targets_d,
target_e = name%in%targets_e,
target_f = name%in%targets_f,
target_g = name%in%targets_g,
target_h = name%in%targets_h,
target_i = name%in%targets_i
)
# vamos a calcular medidas de centralidad y detectar comunidades
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(grado = centrality_degree(),
bc    = centrality_betweenness())
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
install.packages(c("broom", "bslib", "callr", "cli", "desc", "devtools", "dplyr", "dtplyr", "evaluate", "forcats", "gargle", "gert", "ggforce", "ggraph", "gh", "gitcreds", "googlesheets4", "graphlayouts", "gtable", "haven", "hms", "htmltools", "httr", "igraph", "knitr", "lifecycle", "modelr", "pillar", "RcppArmadillo", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rversions", "rvest", "sass", "scales", "stringr", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "tweenr", "viridisLite", "xfun", "zip"))
# Cargar librerias
library(dplyr)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(data.table)
# leo mis datos "enlaces"
# paso 1 ) metabolitos de G. glauca
# paso 2 ) metabolitos - targets | swisstarget ### donde estan estos datos?
# paso 3 ) targets - otras proteinas | string, valores experimentales
# Paso 1) Metabolitos de G. glauca
# La busqueda de la estructura de los metebolitos fue en PubChem "National Center for Biotechnology Information (2022). PubChem Compound Summary for CID 21578020, Galphimine A. Retrieved July 21, 2022 from https://pubchem.ncbi.nlm.nih.gov/compound/Galphimine-A".
# Por medio de los nombres y tomando "Canonical SMILES"
# Ingresando esos datos en SwissTarget para cada compuesto.
# Paso 2) Union de Metabolitos - Targets | SwissTarget
A <- read.csv("SwissTarget_A.csv")
A <- cbind(A, Compuesto=c("A"))
B <- read.csv("SwissTarget_B.csv")
B <- cbind(B, Compuesto=c("B"))
C <- read.csv("SwissTarget_C.csv")
C <- cbind(C, Compuesto=c("C"))
D <- read.csv("SwissTarget_D.csv")
D <- cbind(D, Compuesto=c("D"))
E <- read.csv("SwissTarget_E.csv")
E <- cbind(E, Compuesto=c("E"))
F1 <- read.csv("SwissTarget_F.csv")
F1 <- cbind(F1, Compuesto=c("F"))
G <- read.csv("SwissTarget_G.csv")
G <- cbind(G, Compuesto=c("G"))
H <- read.csv("SwissTarget_H.csv")
H <- cbind(H, Compuesto=c("H"))
I <- read.csv("SwissTarget_I.csv")
I <- cbind(I, Compuesto=c("I"))
Target_SwissTarget <- rbind(A, B, C, D, E, F1, G, H, I)
Target_SwissTarget %>% select(Common.name) -> Target_CommonName
# Target_CommonName son los targets extraidos de SwissTarget como lista solo los nombres comunes, este archivo se hizo para introducir los targets en StringDB -> "Target.csv"
# Target_swissTarget es la union de todos los archivos con el nombre comun y el real, tambien agregando la columna de Compuesto se diferencia cada proteina del compuesto que hizo match se guardo como archivo en "Targets_Compuesto.csv "
names(Target_CommonName) = NULL
fwrite(Target_CommonName, "Target.csv")
fwrite(Target_SwissTarget, "Targets_Compuesto.csv")
g_SwissTarget <- Target_SwissTarget %>% as_tibble()
#En este paso elimine columnas innecesarias
g_SwissTarget <- g_SwissTarget[,-1]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-4]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-2]
# Duda de la columna de Probability si se deja o se quita. ***********
# En g_SwissTarget solo hay dos columnas Common.name y Compuesto -> cambiaré esos nombres a Protein y Metabolito
g_SwissTarget <- g_SwissTarget %>% rename (Protein = Common.name, Metabolite = Compuesto)
Table_SwissTarget <- g_SwissTarget
#Esta es la Tabla
# Estos son datos de Grafos
g_SwissTarget <-
g_SwissTarget %>%
select(Metabolite, Protein) %>%
graph_from_data_frame(d = ., directed = T) %>%
as_tbl_graph()
#plot(g_SwissTarget)
# Paso 3) Targets - otras proteinas | string; Valores experimentales, Capturas de patalla Settings 21/07/22
g_proteinas <- read_csv("String_Interactions.csv")
g_proteinas <- g_proteinas %>% as_tibble()
g_proteinas <-
g_proteinas %>%
filter(experimental > 0)
g_proteinas <- graph_from_data_frame(g_proteinas, directed = F)
g_proteinas <- as_tbl_graph(g_proteinas)
#vamos a sacar un diccionario de si las proteinas son targets o no lo son (son segundos vecinos)
mis_targets <- Table_SwissTarget$Protein
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets)
ggraph(g_proteinas)  +
geom_edge_link(alpha = 0.05)  +
geom_node_point(aes(color = target))
g_proteinas %>% activate("nodes") %>%
as.tibble() %>% group_by(target) %>% tally()
# vamos a ver QUE metabolito está conectado a estos genes
targets_a <-
Table_SwissTarget %>%
filter(Metabolite == "A") %>%
pull(Protein)
targets_b <-
Table_SwissTarget %>%
filter(Metabolite == "B") %>%
pull(Protein)
targets_c <-
Table_SwissTarget %>%
filter(Metabolite == "C") %>%
pull(Protein)
targets_d <-
Table_SwissTarget %>%
filter(Metabolite == "D") %>%
pull(Protein)
targets_e <-
Table_SwissTarget %>%
filter(Metabolite == "E") %>%
pull(Protein)
targets_f <-
Table_SwissTarget %>%
filter(Metabolite == "F") %>%
pull(Protein)
targets_g <-
Table_SwissTarget %>%
filter(Metabolite == "G") %>%
pull(Protein)
targets_h <-
Table_SwissTarget %>%
filter(Metabolite == "H") %>%
pull(Protein)
targets_i <-
Table_SwissTarget %>%
filter(Metabolite == "I") %>%
pull(Protein)
#le pongo si son targets
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets,
target_a = name%in%targets_a,
target_b = name%in%targets_b,
target_c = name%in%targets_c,
target_d = name%in%targets_d,
target_e = name%in%targets_e,
target_f = name%in%targets_f,
target_g = name%in%targets_g,
target_h = name%in%targets_h,
target_i = name%in%targets_i
)
# vamos a calcular medidas de centralidad y detectar comunidades
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(grado = centrality_degree(),
bc    = centrality_betweenness())
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
A <- read.csv("SwissTarget_A.csv")
A <- cbind(A, Compuesto=c("A"))
B <- read.csv("SwissTarget_B.csv")
B <- cbind(B, Compuesto=c("B"))
C <- read.csv("SwissTarget_C.csv")
C <- cbind(C, Compuesto=c("C"))
D <- read.csv("SwissTarget_D.csv")
D <- cbind(D, Compuesto=c("D"))
E <- read.csv("SwissTarget_E.csv")
E <- cbind(E, Compuesto=c("E"))
F1 <- read.csv("SwissTarget_F.csv")
F1 <- cbind(F1, Compuesto=c("F"))
G <- read.csv("SwissTarget_G.csv")
G <- cbind(G, Compuesto=c("G"))
H <- read.csv("SwissTarget_H.csv")
H <- cbind(H, Compuesto=c("H"))
I <- read.csv("SwissTarget_I.csv")
I <- cbind(I, Compuesto=c("I"))
Target_SwissTarget <- rbind(A, B, C, D, E, F1, G, H, I)
Target_SwissTarget %>% select(Common.name) -> Target_CommonName
# Target_CommonName son los targets extraidos de SwissTarget como lista solo los nombres comunes, este archivo se hizo para introducir los targets en StringDB -> "Target.csv"
# Target_swissTarget es la union de todos los archivos con el nombre comun y el real, tambien agregando la columna de Compuesto se diferencia cada proteina del compuesto que hizo match se guardo como archivo en "Targets_Compuesto.csv "
names(Target_CommonName) = NULL
fwrite(Target_CommonName, "Target.csv")
fwrite(Target_SwissTarget, "Targets_Compuesto.csv")
g_SwissTarget <- Target_SwissTarget %>% as_tibble()
#En este paso elimine columnas innecesarias
g_SwissTarget <- g_SwissTarget[,-1]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-4]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-2]
# Duda de la columna de Probability si se deja o se quita. ***********
# En g_SwissTarget solo hay dos columnas Common.name y Compuesto -> cambiaré esos nombres a Protein y Metabolito
g_SwissTarget <- g_SwissTarget %>% rename (Protein = Common.name, Metabolite = Compuesto)
Table_SwissTarget <- g_SwissTarget
#Esta es la Tabla
# Estos son datos de Grafos
g_SwissTarget <-
g_SwissTarget %>%
select(Metabolite, Protein) %>%
graph_from_data_frame(d = ., directed = T) %>%
as_tbl_graph()
g_proteinas <- read_csv("String_Interactions.csv")
g_proteinas <- g_proteinas %>% as_tibble()
g_proteinas <-
g_proteinas %>%
filter(experimental > 0)
g_proteinas <- graph_from_data_frame(g_proteinas, directed = F)
g_proteinas <- as_tbl_graph(g_proteinas)
#vamos a sacar un diccionario de si las proteinas son targets o no lo son (son segundos vecinos)
mis_targets <- Table_SwissTarget$Protein
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets)
ggraph(g_proteinas)  +
geom_edge_link(alpha = 0.05)  +
geom_node_point(aes(color = target))
g_proteinas %>% activate("nodes") %>%
as.tibble() %>% group_by(target) %>% tally()
targets_a <-
Table_SwissTarget %>%
filter(Metabolite == "A") %>%
pull(Protein)
targets_b <-
Table_SwissTarget %>%
filter(Metabolite == "B") %>%
pull(Protein)
targets_c <-
Table_SwissTarget %>%
filter(Metabolite == "C") %>%
pull(Protein)
targets_d <-
Table_SwissTarget %>%
filter(Metabolite == "D") %>%
pull(Protein)
targets_e <-
Table_SwissTarget %>%
filter(Metabolite == "E") %>%
pull(Protein)
targets_f <-
Table_SwissTarget %>%
filter(Metabolite == "F") %>%
pull(Protein)
targets_g <-
Table_SwissTarget %>%
filter(Metabolite == "G") %>%
pull(Protein)
targets_h <-
Table_SwissTarget %>%
filter(Metabolite == "H") %>%
pull(Protein)
targets_i <-
Table_SwissTarget %>%
filter(Metabolite == "I") %>%
pull(Protein)
#le pongo si son targets
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets,
target_a = name%in%targets_a,
target_b = name%in%targets_b,
target_c = name%in%targets_c,
target_d = name%in%targets_d,
target_e = name%in%targets_e,
target_f = name%in%targets_f,
target_g = name%in%targets_g,
target_h = name%in%targets_h,
target_i = name%in%targets_i
)
# vamos a calcular medidas de centralidad y detectar comunidades
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(grado = centrality_degree(),
bc    = centrality_betweenness())
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
tabla_analisis_nodos %>%
arrange(desc(bc))
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
tabla_analisis_nodos %>%
arrange(desc(bc))
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(grado = centrality_degree(),
bc    = centrality_betweenness())
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
tabla_analisis_nodos %>%
arrange(desc(bc))
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
View(Target_CommonName)
View(tabla_analisis_nodos)
# Cargar librerias
library(dplyr)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(data.table)
# leo mis datos "enlaces"
# paso 1 ) metabolitos de G. glauca
# paso 2 ) metabolitos - targets | swisstarget ### donde estan estos datos?
# paso 3 ) targets - otras proteinas | string, valores experimentales
# Paso 1) Metabolitos de G. glauca
# La busqueda de la estructura de los metebolitos fue en PubChem "National Center for Biotechnology Information (2022). PubChem Compound Summary for CID 21578020, Galphimine A. Retrieved July 21, 2022 from https://pubchem.ncbi.nlm.nih.gov/compound/Galphimine-A".
# Por medio de los nombres y tomando "Canonical SMILES"
# Ingresando esos datos en SwissTarget para cada compuesto.
# Paso 2) Union de Metabolitos - Targets | SwissTarget
A <- read.csv("SwissTarget_A.csv")
A <- cbind(A, Compuesto=c("A"))
B <- read.csv("SwissTarget_B.csv")
B <- cbind(B, Compuesto=c("B"))
C <- read.csv("SwissTarget_C.csv")
C <- cbind(C, Compuesto=c("C"))
D <- read.csv("SwissTarget_D.csv")
D <- cbind(D, Compuesto=c("D"))
E <- read.csv("SwissTarget_E.csv")
E <- cbind(E, Compuesto=c("E"))
F1 <- read.csv("SwissTarget_F.csv")
F1 <- cbind(F1, Compuesto=c("F"))
G <- read.csv("SwissTarget_G.csv")
G <- cbind(G, Compuesto=c("G"))
H <- read.csv("SwissTarget_H.csv")
H <- cbind(H, Compuesto=c("H"))
I <- read.csv("SwissTarget_I.csv")
I <- cbind(I, Compuesto=c("I"))
Target_SwissTarget <- rbind(A, B, C, D, E, F1, G, H, I)
Target_SwissTarget %>% select(Common.name) -> Target_CommonName
# Target_CommonName son los targets extraidos de SwissTarget como lista solo los nombres comunes, este archivo se hizo para introducir los targets en StringDB -> "Target.csv"
# Target_swissTarget es la union de todos los archivos con el nombre comun y el real, tambien agregando la columna de Compuesto se diferencia cada proteina del compuesto que hizo match se guardo como archivo en "Targets_Compuesto.csv "
names(Target_CommonName) = NULL
fwrite(Target_CommonName, "Target.csv")
fwrite(Target_SwissTarget, "Targets_Compuesto.csv")
g_SwissTarget <- Target_SwissTarget %>% as_tibble()
#En este paso elimine columnas innecesarias
g_SwissTarget <- g_SwissTarget[,-1]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-4]
g_SwissTarget <- g_SwissTarget[,-2]
g_SwissTarget <- g_SwissTarget[,-2]
# Duda de la columna de Probability si se deja o se quita. ***********
# En g_SwissTarget solo hay dos columnas Common.name y Compuesto -> cambiaré esos nombres a Protein y Metabolito
g_SwissTarget <- g_SwissTarget %>% rename (Protein = Common.name, Metabolite = Compuesto)
Table_SwissTarget <- g_SwissTarget
#Esta es la Tabla
# Estos son datos de Grafos
g_SwissTarget <-
g_SwissTarget %>%
select(Metabolite, Protein) %>%
graph_from_data_frame(d = ., directed = T) %>%
as_tbl_graph()
#plot(g_SwissTarget)
# Paso 3) Targets - otras proteinas | string; Valores experimentales, Capturas de patalla Settings 21/07/22
g_proteinas <- read_csv("String_Interactions.csv")
g_proteinas <- g_proteinas %>% as_tibble()
g_proteinas <-
g_proteinas %>%
filter(experimental > 0)
g_proteinas <- graph_from_data_frame(g_proteinas, directed = F)
g_proteinas <- as_tbl_graph(g_proteinas)
#vamos a sacar un diccionario de si las proteinas son targets o no lo son (son segundos vecinos)
mis_targets <- Table_SwissTarget$Protein
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets)
ggraph(g_proteinas)  +
geom_edge_link(alpha = 0.05)  +
geom_node_point(aes(color = target))
g_proteinas %>% activate("nodes") %>%
as.tibble() %>% group_by(target) %>% tally()
# vamos a ver QUE metabolito está conectado a estos genes
targets_a <-
Table_SwissTarget %>%
filter(Metabolite == "A") %>%
pull(Protein)
targets_b <-
Table_SwissTarget %>%
filter(Metabolite == "B") %>%
pull(Protein)
targets_c <-
Table_SwissTarget %>%
filter(Metabolite == "C") %>%
pull(Protein)
targets_d <-
Table_SwissTarget %>%
filter(Metabolite == "D") %>%
pull(Protein)
targets_e <-
Table_SwissTarget %>%
filter(Metabolite == "E") %>%
pull(Protein)
targets_f <-
Table_SwissTarget %>%
filter(Metabolite == "F") %>%
pull(Protein)
targets_g <-
Table_SwissTarget %>%
filter(Metabolite == "G") %>%
pull(Protein)
targets_h <-
Table_SwissTarget %>%
filter(Metabolite == "H") %>%
pull(Protein)
targets_i <-
Table_SwissTarget %>%
filter(Metabolite == "I") %>%
pull(Protein)
#le pongo si son targets
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(target = name%in%mis_targets,
target_a = name%in%targets_a,
target_b = name%in%targets_b,
target_c = name%in%targets_c,
target_d = name%in%targets_d,
target_e = name%in%targets_e,
target_f = name%in%targets_f,
target_g = name%in%targets_g,
target_h = name%in%targets_h,
target_i = name%in%targets_i
)
# vamos a calcular medidas de centralidad y detectar comunidades
g_proteinas <-
g_proteinas %>%
activate("nodes") %>%
mutate(grado = centrality_degree(),
bc    = centrality_betweenness())
tabla_analisis_nodos <-
g_proteinas %>%
activate("nodes") %>%
as_tibble()
tabla_analisis_nodos %>%
arrange(desc(grado))
tabla_analisis_nodos %>%
arrange(desc(bc))
